#!/usr/bin/env bash
set -euo pipefail

# Script de exemplo mostrando diferentes fluxos de uso dos scripts modulares
# Este script serve apenas como demonstra√ß√£o - N√ÉO execute diretamente

echo "üìã Exemplos de Uso dos Scripts Modulares do k8s-addon"
echo "====================================================="
echo ""
echo "‚ö†Ô∏è  ESTE √â UM SCRIPT DE DEMONSTRA√á√ÉO - N√ÉO EXECUTE!"
echo ""

echo "üéØ CEN√ÅRIO 1: Deploy Completo (Recomendado para primeira vez)"
echo "============================================================="
echo "# Executa todo o pipeline automaticamente"
echo "./run-all.sh"
echo ""
echo "# Com imagem customizada"
echo "./run-all.sh ghcr.io/meu-usuario/k8s-addon:v1.0.0"
echo ""

echo "üîß CEN√ÅRIO 2: Desenvolvimento Iterativo"
echo "======================================="
echo "# 1. Setup inicial apenas uma vez"
echo "./setup-environment.sh"
echo ""
echo "# 2. Deploy inicial"
echo "./build-image.sh"
echo "./deploy-rbac.sh"
echo "./deploy-addon.sh"
echo ""
echo "# 3. Para mudan√ßas no c√≥digo - apenas rebuild e redeploy"
echo "./build-image.sh k8s-addon:dev-v2"
echo "./deploy-addon.sh k8s-addon:dev-v2"
echo ""
echo "# 4. Aguardar controladores ficarem prontos (se necess√°rio)"
echo "./wait-for-controllers.sh"
echo ""
echo "# 5. Testar ap√≥s mudan√ßas"
echo "./run-tests-only.sh"
echo ""

echo "üß™ CEN√ÅRIO 3: Apenas Testes (Addon j√° est√° rodando)"
echo "=================================================="
echo "./run-tests-only.sh"
echo ""
echo "# Ou testes individuais"
echo "./test-namespace.sh meu-namespace-teste"
echo "./test-node.sh minikube"
echo ""

echo "üîÑ CEN√ÅRIO 4: Deploy com Registry Externo"
echo "========================================="
echo "# 1. Build e push para registry"
echo "docker build -t ghcr.io/user/k8s-addon:v1.0.0 ."
echo "docker push ghcr.io/user/k8s-addon:v1.0.0"
echo ""
echo "# 2. Deploy usando imagem do registry"
echo "./deploy-rbac.sh"
echo "./deploy-addon.sh ghcr.io/user/k8s-addon:v1.0.0"
echo "./run-tests-only.sh"
echo ""

echo "üóëÔ∏è CEN√ÅRIO 5: Limpeza e Reset"
echo "============================="
echo "# Remove tudo do cluster"
echo "./cleanup.sh"
echo ""
echo "# Depois pode fazer deploy limpo novamente"
echo "./run-all.sh"
echo ""

echo "üêõ CEN√ÅRIO 6: Debug e Troubleshooting"
echo "====================================="
echo "# Ver logs em tempo real"
echo "kubectl -n kube-system logs -l app=k8s-addon -f"
echo ""
echo "# Health checks"
echo "kubectl -n kube-system port-forward deploy/k8s-addon 8081:8081 &"
echo "curl http://localhost:8081/healthz"
echo "curl http://localhost:8081/readyz"
echo ""
echo "# M√©tricas Prometheus"
echo "kubectl -n kube-system port-forward deploy/k8s-addon 8080:8080 &"
echo "curl http://localhost:8080/metrics"
echo ""

echo "üîß CEN√ÅRIO 7: Configura√ß√µes Customizadas"
echo "========================================"
echo "# Usar imagem espec√≠fica em todos os scripts"
echo "export IMAGE_NAME='minha-imagem:custom'"
echo "./run-all.sh \$IMAGE_NAME"
echo ""
echo "# Ou passar como par√¢metro"
echo "./build-image.sh minha-imagem:v1.2.3"
echo "./deploy-addon.sh minha-imagem:v1.2.3"
echo ""

echo "‚öôÔ∏è CEN√ÅRIO 8: CI/CD Pipeline"
echo "============================"
echo "# Em um pipeline de CI/CD, voc√™ usaria:"
echo "#!/bin/bash"
echo "set -euo pipefail"
echo ""
echo "# Build da imagem"
echo "./build-image.sh \$CI_REGISTRY_IMAGE:\$CI_COMMIT_SHA"
echo ""
echo "# Push para registry"
echo "docker push \$CI_REGISTRY_IMAGE:\$CI_COMMIT_SHA"
echo ""
echo "# Deploy no cluster de staging"
echo "./deploy-rbac.sh"
echo "./deploy-addon.sh \$CI_REGISTRY_IMAGE:\$CI_COMMIT_SHA"
echo ""
echo "# Executar testes"
echo "./run-tests-only.sh"
echo ""

echo "=================================================="
echo "üìö Para mais detalhes, consulte SCRIPTS.md"
echo "üìö Para informa√ß√µes gerais, consulte README.md"
echo "==================================================" 